package dao;

import java.sql.DriverManager;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Auction;
import model.Bid;
import model.Employee;
import model.Item;
import dao.AuctionDao;

public class ItemDao {

	
	public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		java.sql.Connection myConnection = null;
		try {
			String mysJDBCDriver = "com.mysql.jdbc.Driver";
			String url = "jdbc:mysql://localhost:3306/auction_house";
			String userID = "root";
			String password1 = "root";
			
			Class.forName(mysJDBCDriver).newInstance();
			java.util.Properties mysys = System.getProperties();
			mysys.put("user", userID);
			mysys.put("password", password1);
			myConnection = DriverManager.getConnection(url, mysys);
			Statement myStatement= myConnection.createStatement();
			ResultSet resultSet = myStatement.executeQuery("select * from item;");
			
			ResultSetMetaData rsmd = resultSet.getMetaData();
			int columnsNumber = rsmd.getColumnCount();
			System.out.println(columnsNumber);
			while(resultSet.next()) {
					int itemId = resultSet.getInt("ItemId");
					String description = resultSet.getString("Description");
					String name = resultSet.getString("Name");
					String itemType = resultSet.getString("ItemType");
					int numCopies = resultSet.getInt("NumCopies");
					Item myItem = new Item();
					myItem.setItemID(itemId);
					myItem.setDescription(description);
					myItem.setName(name);
					myItem.setType(itemType);
					myItem.setNumCopies(numCopies);
					items.add(myItem);
					
			}
		
		
			System.out.println("I am able to connect in customer and print all");
			try {
	            myConnection.close();
	        } catch (SQLException e) {
	        	
	        }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Did not connect or put");
			System.out.println(e.getMessage());
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*Sample data ends*/
		return items;

	}
	
	public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		
		
		/*Sample data begins*/
		for (int i = 0; i < 5; i++) {
			Item item = new Item();
			item.setItemID(123);
			item.setDescription("sample description");
			item.setType("BOOK");
			item.setName("Sample Book");
			item.setNumCopies(2);
			items.add(item);
		}
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getSummaryListing(String searchKeyword) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		for (int i = 0; i < 6; i++) {
			Item item = new Item();
			item.setItemID(123);
			item.setDescription("sample description");
			item.setType("BOOK");
			item.setName("Sample Book");
			item.setSoldPrice(150);
			items.add(item);
		}
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();
		
		/*Sample data begins*/
		for (int i = 0; i < 4; i++) {
			Item item = new Item();
			item.setItemID(123);
			item.setDescription("sample description");
			item.setType("BOOK");
			item.setName("Sample Book");
			item.setNumCopies(2);
			items.add(item);
		}
		/*Sample data ends*/
		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		for (int i = 0; i < 4; i++) {
			Item item = new Item();
			item.setItemID(123);
			item.setDescription("sample description");
			item.setType("BOOK");
			item.setName("Sample Book");
			items.add(item);
			
			Bid bid = new Bid();
			bid.setCustomerID("123-12-1234");
			bid.setBidPrice(120);
			bids.add(bid);
			
			Auction auction = new Auction();
			auction.setMinimumBid(100);
			auction.setBidIncrement(10);
			auction.setAuctionID(123);
			auctions.add(auction);
		}
		/*Sample data ends*/
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getItemTypes() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * Each item type is to be added to the "item" object using setType method
		 */
		
		List<Item> items = new ArrayList<Item>();
		List<Item> types = new ArrayList<Item>();
		
		items = getItems();
		for(int i=0; i<items.size(); i++) {
			int found =0;
			for(int j=0; j<types.size(); j++) {
				if(items.get(i).getType().equalsIgnoreCase(types.get(j).getType())) {
					found = 1;
					break;
				}
			}
			if(found == 0) {
				types.add(items.get(i));
			}
		}
		
		return types;
	}

	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		//List<Item> myolditems = new ArrayList<Item>();
		List<Auction> myoldauctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		java.sql.Connection myConnection = null;
		try {
			String mysJDBCDriver = "com.mysql.jdbc.Driver";
			String url = "jdbc:mysql://localhost:3306/auction_house";
			String userID = "root";
			String password1 = "root";
			
			Class.forName(mysJDBCDriver).newInstance();
			java.util.Properties mysys = System.getProperties();
			mysys.put("user", userID);
			mysys.put("password", password1);
			myConnection = DriverManager.getConnection(url, mysys);
			Statement myStatement= myConnection.createStatement();
			ResultSet resultSet = myStatement.executeQuery("select * from item WHERE Name LIKE '%"+itemName+"%';");
			
			ResultSetMetaData rsmd = resultSet.getMetaData();
			int columnsNumber = rsmd.getColumnCount();
			//System.out.println(columnsNumber);
			while(resultSet.next()) {
					int itemId = resultSet.getInt("ItemId");
					String description = resultSet.getString("Description");
					String name = resultSet.getString("Name");
					String itemType = resultSet.getString("ItemType");
					int numCopies = resultSet.getInt("NumCopies");
					Item myItem = new Item();
					myItem.setItemID(itemId);
					myItem.setDescription(description);
					myItem.setName(name);
					myItem.setType(itemType);
					myItem.setNumCopies(numCopies);
					items.add(myItem);
					
			}
			
			AuctionDao auction1 = new AuctionDao();
			myoldauctions = auction1.getAllAuctions();
			for(int i=0; i<myoldauctions.size(); i++) {
				for(int j=0; j<items.size(); j++) {
					if(items.get(j).getItemID() == myoldauctions.get(i).getItemID()) {
						auctions.add(myoldauctions.get(i));
						break;
					}
				}
			}
			
			
			List<Item> newItems = new ArrayList<Item>();
			for(int i=0; i<auctions.size(); i++) {
				for(int j=0; j<items.size(); j++) {
					if(items.get(j).getItemID() == auctions.get(i).getItemID()){
						newItems.add(items.get(j));
					}
				}
			}
		
			output.add(newItems);
			output.add(auctions);
		
			System.out.println("I am able to connect in customer and print all");
			try {
	            myConnection.close();
	        } catch (SQLException e) {
	        	
	        }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Did not connect or put");
			System.out.println(e.getMessage());
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*Sample data ends*/

		/*Sample data ends*/
		
		
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		List<Item> myolditems = new ArrayList<Item>();
		List<Auction> myoldauctions = new ArrayList<Auction>();
		
		
		myolditems = getItems();
		for(int i=0; i<myolditems.size(); i++) {
			if(itemType.equalsIgnoreCase(myolditems.get(i).getType())) {
				items.add(myolditems.get(i));
			}
		}
		AuctionDao auction1 = new AuctionDao();
		myoldauctions = auction1.getAllAuctions();
		for(int i=0; i<myoldauctions.size(); i++) {
			for(int j=0; j<items.size(); j++) {
				if(items.get(j).getItemID() == myoldauctions.get(i).getItemID()) {
					auctions.add(myoldauctions.get(i));
					break;
				}
			}
		}
		
		List <Integer> removal = new ArrayList();
		List<Item> newItems = new ArrayList<Item>();
		for(int i=0; i<auctions.size(); i++) {
			for(int j=0; j<items.size(); j++) {
				if(items.get(j).getItemID() == auctions.get(i).getItemID()){
					newItems.add(items.get(j));
				}
			}
		}
		System.out.println(items.size());
		System.out.println(auctions.size());
		output.add(newItems);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		for (int i = 0; i < 6; i++) {
			Item item = new Item();
			item.setItemID(123);
			item.setDescription("sample description");
			item.setType("BOOK");
			item.setName("Sample Book");
			item.setNumCopies(50);
			items.add(item);
		}
		/*Sample data ends*/
		
		return items;

	}

}
